{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "050f5e8c-8078-44d5-bdff-66a0fba3de9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pip install beartype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "60ee6d89-4d7b-42cb-aefb-b4348812806b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gradio as gr\n",
    "import pandas as pd\n",
    "import pickle\n",
    "from beartype import beartype\n",
    "\n",
    "class Predictor:\n",
    "    \"\"\"Predicts the approval of a loan.\n",
    "\n",
    "    This class provides a convenient way to predict whether a loan will be approved\n",
    "    given various features such as gender, marital status, income, etc.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(\n",
    "        self,\n",
    "        Gender: str,\n",
    "        Married: str,\n",
    "        Dependents: str,\n",
    "        Education: str,\n",
    "        Self_Employed: str,\n",
    "        Property_Area: str,\n",
    "        ApplicantIncome: int,\n",
    "        CoapplicantIncome: int,\n",
    "        LoanAmount: int,\n",
    "        Loan_Amount_Term: int,\n",
    "        Credit_History: int\n",
    "    ) -> None:\n",
    "        \"\"\"Initializes the Predictor class.\n",
    "\n",
    "        Args:\n",
    "            Gender (str): Gender of the applicant.\n",
    "            Married (str): Marital status of the applicant.\n",
    "            Dependents (str): Number of dependents.\n",
    "            Education (str): Education level of the applicant.\n",
    "            Self_Employed (str): Self-employment status of the applicant.\n",
    "            Property_Area (str): Property area where the applicant resides.\n",
    "            ApplicantIncome (int): Income of the applicant.\n",
    "            CoapplicantIncome (int): Income of the co-applicant.\n",
    "            LoanAmount (int): Amount of the loan.\n",
    "            Loan_Amount_Term (int): Term of the loan.\n",
    "            Credit_History (int): Credit history of the applicant.\n",
    "\n",
    "        Returns:\n",
    "            str: The predicted approval status of the loan.\n",
    "        \"\"\"\n",
    "        self.Gender = Gender\n",
    "        self.Married = Married\n",
    "        self.Dependents = Dependents\n",
    "        self.Education = Education\n",
    "        self.Self_Employed = Self_Employed\n",
    "        self.Property_Area = Property_Area\n",
    "        self.ApplicantIncome = ApplicantIncome\n",
    "        self.CoapplicantIncome = CoapplicantIncome\n",
    "        self.LoanAmount = LoanAmount\n",
    "        self.Loan_Amount_Term = Loan_Amount_Term\n",
    "        self.Credit_History = Credit_History\n",
    "\n",
    "    @beartype\n",
    "    def predict_approval(self) -> str:\n",
    "        # Prepare the input features for prediction\n",
    "        input_features = pd.DataFrame({\n",
    "            'Gender': [self.Gender],\n",
    "            'Married': [self.Married],\n",
    "            'Dependents': [self.Dependents],\n",
    "            'Education': [self.Education],\n",
    "            'Self_Employed': [self.Self_Employed],\n",
    "            'Property_Area': [self.Property_Area],\n",
    "            'ApplicantIncome': [self.ApplicantIncome],\n",
    "            'CoapplicantIncome': [self.CoapplicantIncome],\n",
    "            'LoanAmount': [self.LoanAmount],\n",
    "            'Loan_Amount_Term': [self.Loan_Amount_Term],\n",
    "            'Credit_History': [self.Credit_History]\n",
    "        })\n",
    "\n",
    "        # Load the model\n",
    "        model = pickle.load(open(\"models/loan_approval_model.pkl\", \"rb\"))\n",
    "\n",
    "        # Make predictions on the input features\n",
    "        predicted_approval = model.predict(input_features)\n",
    "\n",
    "        # Return the predicted result\n",
    "        if predicted_approval[0] == 1:\n",
    "            return \"Hurray !!! Your Loan is Approved\"\n",
    "        else:\n",
    "            return \"Sorry, we cannot approve your credit now. Please try again later.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b1b560c9-8561-4d5b-a559-f9880f3bb113",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
